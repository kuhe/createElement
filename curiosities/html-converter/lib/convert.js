const jsdom = require("jsdom");
const { JSDOM } = jsdom;

/**
 * Takes HTML and outputs document.createElement calls.
 * Bound events are not carried over.
 *
 * @param {string} html
 * @returns {string}
 */
module.exports = function (html) {
    html = html.trim();
    const dom = new JSDOM(`html`);
    const { window } = dom;
    const { document } = window;

    const el = document.createElement('div');
    el.innerHTML = html;

    return `/** code generated by createElement/curiosities/html-converter/cli.js */
template = () => ` + toFactory(el.childNodes[0]);
};

/**
 * @param {HTMLElement} el
 * @returns {string|object} map of attributes.
 */
function attributes(el) {
    const map = {};
    if (!el.attributes) {
        return map;
    }
    for (let i = 0, atts = el.attributes, n = atts.length; i < n; i++){
        const att = atts[i];
        map[att.nodeName] = att.nodeValue;
    }
    if (Object.keys(map).length === 1 && 'class' in map) {
        return String(map.class);
    }
    return map;
}

/**
 * Converts element recursively to document createElement calls.
 * @param {HTMLElement} el
 * @param {string} indent
 * @returns {string}
 */
function toFactory(el, indent = '') {
    var call = (el.tagName || 'unknown').toLowerCase().replace(/-/g, '_');
    if (call === 'unknown') {
        const str = el.nodeValue.toString();
        const text = unescape(str);
        if (text.trim()) {
            const code = `\`${text.trim()}\``;
            // return call = indent + `document.createTextNode(${code})`;
            return indent + code;
        } else {
            return '';
        }
    }
    const attrs = attributes(el);

    var children;
    if (el.childNodes.length) {
        children = Array.from(el.childNodes)
            .map(c => toFactory(c, indent + '    '))
            .filter(Boolean)
            .join(',\n');
    } else {
        children = indent + "    `" + el.innerHTML + "`";
    }

    const codeGen =
`${indent}${call}(${JSON.stringify(attrs)},
${children}
${indent})/*${call}*/`;

    return codeGen;
}
